// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Thaiproperty.Models;

namespace Thaiproperty.Migrations
{
    [DbContext(typeof(ThaipropertyDbContext))]
    partial class ThaipropertyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-preview2-30571")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Thaiproperty.Models.Album", b =>
                {
                    b.Property<int>("AlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AlbumID");

                    b.Property<string>("AlbumDescription")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("AlbumTitle")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("TotalView");

                    b.HasKey("AlbumId");

                    b.ToTable("Album");
                });

            modelBuilder.Entity("Thaiproperty.Models.AlbumComment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CommentID");

                    b.Property<int>("AlbumId")
                        .HasColumnName("AlbumID");

                    b.Property<string>("CommentDetail")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("CommentName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Ipaddress")
                        .IsRequired()
                        .HasColumnName("IPAddress")
                        .HasMaxLength(50);

                    b.HasKey("CommentId");

                    b.HasIndex("AlbumId");

                    b.ToTable("Album_Comment");
                });

            modelBuilder.Entity("Thaiproperty.Models.AlbumItem", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ItemID");

                    b.Property<int>("AlbumId")
                        .HasColumnName("AlbumID");

                    b.Property<string>("ItemFileName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int>("TotalView");

                    b.HasKey("ItemId");

                    b.HasIndex("AlbumId");

                    b.ToTable("Album_Item");
                });

            modelBuilder.Entity("Thaiproperty.Models.Announcement", b =>
                {
                    b.Property<int>("AnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AnnouncementID");

                    b.Property<string>("Body")
                        .HasColumnType("ntext");

                    b.Property<int?>("CategoryId")
                        .HasColumnName("CategoryID");

                    b.Property<DateTime>("PostDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("StaffId")
                        .HasColumnName("StaffID");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("AnnouncementId");

                    b.ToTable("Announcement");
                });

            modelBuilder.Entity("Thaiproperty.Models.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ArticleID");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<byte?>("CategoryId")
                        .HasColumnName("CategoryID");

                    b.Property<int>("MemberId")
                        .HasColumnName("MemberID");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ArticleId");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("Thaiproperty.Models.BannerClick", b =>
                {
                    b.Property<int>("ClickId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ClickID");

                    b.Property<string>("BannerCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("ClickTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("FullReferral")
                        .HasMaxLength(1000);

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress")
                        .HasMaxLength(15);

                    b.Property<string>("Referral")
                        .HasMaxLength(200);

                    b.HasKey("ClickId");

                    b.ToTable("BannerClick");
                });

            modelBuilder.Entity("Thaiproperty.Models.BoardReply", b =>
                {
                    b.Property<int>("ReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ReplyID");

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ReplyBody")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime>("ReplyDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ReplyEmail")
                        .HasMaxLength(50);

                    b.Property<string>("ReplyName")
                        .HasMaxLength(50);

                    b.Property<int>("TopicId")
                        .HasColumnName("TopicID");

                    b.Property<int?>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("ReplyId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("TopicId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("Board_Reply");
                });

            modelBuilder.Entity("Thaiproperty.Models.BoardTopic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TopicID");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<int>("ForumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ForumID")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("Icon")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Ipaddress")
                        .IsRequired()
                        .HasColumnName("IPAddress")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<bool>("IsBan");

                    b.Property<DateTime>("Posted")
                        .HasColumnType("datetime");

                    b.Property<string>("TopicTitle")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.Property<int>("Views");

                    b.HasKey("TopicId");

                    b.ToTable("Board_Topic");
                });

            modelBuilder.Entity("Thaiproperty.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BrandID");

                    b.Property<string>("BrandNameEn")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("BrandNameTh")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("BrandId");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("Thaiproperty.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CommentID");

                    b.Property<DateTime>("CommentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CommentDetails")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("CommentEmail")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("CommentKey")
                        .HasMaxLength(50);

                    b.Property<string>("CommentName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress")
                        .HasMaxLength(16);

                    b.Property<bool>("IsApprove");

                    b.Property<int?>("MemberId")
                        .HasColumnName("MemberID");

                    b.Property<int>("PostId")
                        .HasColumnName("PostID");

                    b.HasKey("CommentId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("PostId", "CommentId")
                        .HasName("IX_Comment_PostID")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Thaiproperty.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CompanyID");

                    b.Property<string>("Address")
                        .HasMaxLength(250);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("CompanyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CompanyTypeID")
                        .HasDefaultValueSql("((3))");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50);

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50);

                    b.Property<string>("Username")
                        .HasMaxLength(50);

                    b.Property<string>("WebSite")
                        .HasMaxLength(50);

                    b.HasKey("CompanyId");

                    b.HasIndex("CompanyTypeId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Thaiproperty.Models.CompanyType", b =>
                {
                    b.Property<int>("CompanyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CompanyTypeID");

                    b.Property<string>("CompanyType1")
                        .IsRequired()
                        .HasColumnName("CompanyType")
                        .HasMaxLength(50);

                    b.HasKey("CompanyTypeId");

                    b.ToTable("CompanyType");
                });

            modelBuilder.Entity("Thaiproperty.Models.DeletedPost", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnName("PostID");

                    b.Property<short?>("Area");

                    b.Property<byte?>("Bedroom");

                    b.Property<string>("ContactName")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DeleteDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("DeleteIp")
                        .IsRequired()
                        .HasColumnName("DeleteIP")
                        .HasMaxLength(50);

                    b.Property<int?>("DeleteReason");

                    b.Property<int?>("DistrictId")
                        .HasColumnName("DistrictID");

                    b.Property<bool?>("ForRent");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("PostIp")
                        .IsRequired()
                        .HasColumnName("PostIP")
                        .HasMaxLength(50);

                    b.Property<int?>("Price");

                    b.Property<int?>("ProjectId")
                        .HasColumnName("ProjectID");

                    b.Property<int?>("ProvinceId")
                        .HasColumnName("ProvinceID");

                    b.Property<string>("Telephone")
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int?>("TypeId")
                        .HasColumnName("TypeID");

                    b.HasKey("PostId");

                    b.ToTable("DeletedPost");
                });

            modelBuilder.Entity("Thaiproperty.Models.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .HasColumnName("DistrictID");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("DistrictNameEn")
                        .HasColumnName("DistrictName_En")
                        .HasMaxLength(50);

                    b.Property<int>("ProvinceId")
                        .HasColumnName("ProvinceID");

                    b.HasKey("DistrictId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("Thaiproperty.Models.Interview", b =>
                {
                    b.Property<int>("InterviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InterviewID");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("InterviewDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("InterviewId");

                    b.ToTable("Interview");
                });

            modelBuilder.Entity("Thaiproperty.Models.Keyword", b =>
                {
                    b.Property<string>("Keyword1")
                        .HasColumnName("Keyword")
                        .HasMaxLength(50);

                    b.Property<int>("ForRent");

                    b.Property<string>("SqlSyntax")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int>("TypeId")
                        .HasColumnName("TypeID");

                    b.HasKey("Keyword1");

                    b.ToTable("Keyword");
                });

            modelBuilder.Entity("Thaiproperty.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MemberID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Gender");

                    b.Property<bool>("IsBan");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("LastLoginIp")
                        .HasColumnName("LastLoginIP")
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("MemberTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MemberTypeID")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<int>("ProvinceId")
                        .HasColumnName("ProvinceID");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.HasKey("MemberId");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("Thaiproperty.Models.NewProject", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProjectID");

                    b.Property<string>("Address")
                        .HasMaxLength(80);

                    b.Property<string>("BeginPrice")
                        .HasMaxLength(50);

                    b.Property<int>("CompanyId")
                        .HasColumnName("CompanyID");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DistrictId")
                        .HasColumnName("DistrictID");

                    b.Property<string>("Ipaddress")
                        .IsRequired()
                        .HasColumnName("IPAddress")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<double?>("LocationX");

                    b.Property<double?>("LocationY");

                    b.Property<string>("LongDesc")
                        .HasColumnType("ntext");

                    b.Property<string>("MaxPrice")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ProjectFinishDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ProjectImageUrl")
                        .HasMaxLength(500);

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ProjectNameEn")
                        .HasMaxLength(50);

                    b.Property<string>("ProjectPhone")
                        .HasMaxLength(50);

                    b.Property<string>("ProjectWebSite")
                        .HasMaxLength(400);

                    b.Property<string>("ShortDesc")
                        .HasMaxLength(150);

                    b.Property<bool>("Suspend");

                    b.Property<int?>("TypeId")
                        .HasColumnName("TypeID");

                    b.HasKey("ProjectId");

                    b.HasIndex("ProjectName");

                    b.HasIndex("ProjectNameEn")
                        .HasName("IX_NewProject_ProjectNameEN");

                    b.ToTable("NewProject");
                });

            modelBuilder.Entity("Thaiproperty.Models.NewProjectComment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CommentID");

                    b.Property<string>("AttachImage")
                        .HasMaxLength(250);

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CommentDetails")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("CommentName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Ipaddress")
                        .IsRequired()
                        .HasColumnName("IPAddress")
                        .HasMaxLength(50);

                    b.Property<int>("ProjectId")
                        .HasColumnName("ProjectID");

                    b.HasKey("CommentId");

                    b.HasIndex("ProjectId");

                    b.ToTable("NewProject_Comment");
                });

            modelBuilder.Entity("Thaiproperty.Models.News", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("NewsID");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime>("PostDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<int>("TotalView");

                    b.HasKey("NewsId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Thaiproperty.Models.Place", b =>
                {
                    b.Property<int>("PlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PlaceID");

                    b.Property<int?>("DistrictId")
                        .HasColumnName("DistrictID");

                    b.Property<string>("PlaceGoogleXml")
                        .HasColumnName("PlaceGoogleXML")
                        .HasMaxLength(50);

                    b.Property<double?>("PlaceMapX");

                    b.Property<double?>("PlaceMapY");

                    b.Property<string>("PlaceNameEn")
                        .HasColumnName("PlaceName_En")
                        .HasMaxLength(50);

                    b.Property<string>("PlaceNameTh")
                        .IsRequired()
                        .HasColumnName("PlaceName_Th")
                        .HasMaxLength(50);

                    b.Property<int>("PlaceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PlaceTypeID")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("PlaceId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("PlaceTypeId", "PlaceNameTh", "PlaceNameEn", "PlaceId")
                        .HasName("IX_PlaceTypeID")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("Place");
                });

            modelBuilder.Entity("Thaiproperty.Models.PlaceType", b =>
                {
                    b.Property<int>("PlaceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PlaceTypeID");

                    b.Property<string>("PlaceTypeNameEn")
                        .HasColumnName("PlaceTypeName_En")
                        .HasMaxLength(50);

                    b.Property<string>("PlaceTypeNameTh")
                        .IsRequired()
                        .HasColumnName("PlaceTypeName_Th")
                        .HasMaxLength(50);

                    b.HasKey("PlaceTypeId");

                    b.ToTable("PlaceType");
                });

            modelBuilder.Entity("Thaiproperty.Models.PostLog", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnName("PostID");

                    b.Property<string>("Browser")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Ipaddress")
                        .IsRequired()
                        .HasColumnName("IPAddress")
                        .HasMaxLength(50);

                    b.Property<bool>("IsMobile");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("PostFromUrl")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.HasKey("PostId");

                    b.ToTable("PostLog");
                });

            modelBuilder.Entity("Thaiproperty.Models.PreForumsPost", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PostID");

                    b.Property<bool>("AlreadyAdd");

                    b.Property<string>("BoardCategoryTitle")
                        .HasMaxLength(50);

                    b.Property<int>("ForumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ForumID")
                        .HasDefaultValueSql("((2))");

                    b.Property<string>("PostBody")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("PostName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("Tag")
                        .HasColumnName("tag")
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("Views");

                    b.HasKey("PostId");

                    b.HasIndex("PostDate")
                        .HasName("IX_PreForums_Post");

                    b.ToTable("PreForums_Post");
                });

            modelBuilder.Entity("Thaiproperty.Models.PreForumsReply", b =>
                {
                    b.Property<int>("ReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ReplyID");

                    b.Property<string>("PostBody")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime>("PostDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PostId")
                        .HasColumnName("PostID");

                    b.Property<string>("PostName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("ReplyId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("PostId")
                        .HasName("IX_PreForums_Reply")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("PreForums_Reply");
                });

            modelBuilder.Entity("Thaiproperty.Models.PrePost", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PostID");

                    b.Property<string>("Address")
                        .HasColumnType("ntext");

                    b.Property<bool>("AlreadyAdd");

                    b.Property<short>("Area");

                    b.Property<byte>("AreaUnit");

                    b.Property<byte>("BathRoom");

                    b.Property<byte>("BedRoom");

                    b.Property<string>("ContactName")
                        .HasMaxLength(50);

                    b.Property<string>("DetailsHtml")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<int>("DistrictId")
                        .HasColumnName("DistrictID");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50);

                    b.Property<byte>("Floor");

                    b.Property<bool>("ForRent");

                    b.Property<bool>("HaveAirCon");

                    b.Property<bool>("HaveCableTv")
                        .HasColumnName("HaveCableTV");

                    b.Property<bool>("HaveFitness");

                    b.Property<bool>("HaveFurniture");

                    b.Property<bool>("HaveInternet");

                    b.Property<bool>("HaveParking");

                    b.Property<bool>("HavePhoneLine");

                    b.Property<bool>("HaveShowerHeater");

                    b.Property<string>("ImageList")
                        .HasColumnType("ntext");

                    b.Property<string>("Latitude")
                        .HasMaxLength(50);

                    b.Property<string>("Longtitude")
                        .HasMaxLength(50);

                    b.Property<bool>("NearBts")
                        .HasColumnName("NearBTS");

                    b.Property<bool>("NearSubway");

                    b.Property<string>("PlaceIdlist")
                        .HasColumnName("PlaceIDList")
                        .HasMaxLength(100);

                    b.Property<int>("Price");

                    b.Property<int>("ProvinceId")
                        .HasColumnName("ProvinceID");

                    b.Property<string>("SourceUrl")
                        .HasMaxLength(500);

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("TypeId")
                        .HasColumnName("TypeID");

                    b.HasKey("PostId");

                    b.ToTable("PrePost");
                });

            modelBuilder.Entity("Thaiproperty.Models.PropertyType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TypeID");

                    b.Property<string>("TypeNameEn")
                        .IsRequired()
                        .HasColumnName("TypeName_En")
                        .HasMaxLength(50);

                    b.Property<string>("TypeNameTh")
                        .IsRequired()
                        .HasColumnName("TypeName_Th")
                        .HasMaxLength(50);

                    b.HasKey("TypeId");

                    b.ToTable("PropertyType");
                });

            modelBuilder.Entity("Thaiproperty.Models.PropImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ImageID");

                    b.Property<string>("ImageFileName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))")
                        .HasMaxLength(200);

                    b.Property<int>("PostId")
                        .HasColumnName("PostID");

                    b.HasKey("ImageId");

                    b.HasIndex("PostId", "ImageFileName")
                        .HasName("IX_Prop_Image");

                    b.ToTable("Prop_Image");
                });

            modelBuilder.Entity("Thaiproperty.Models.PropOption", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnName("PostID");

                    b.Property<bool>("AirCon");

                    b.Property<bool>("CableTv")
                        .HasColumnName("CableTV");

                    b.Property<bool>("DirectLine");

                    b.Property<bool>("Fitness");

                    b.Property<bool>("Furniture");

                    b.Property<bool>("Internet");

                    b.Property<bool>("NearBts")
                        .HasColumnName("NearBTS");

                    b.Property<bool>("NearSubway");

                    b.Property<bool>("Parking");

                    b.Property<bool>("ShowerHeater");

                    b.HasKey("PostId");

                    b.HasIndex("PostId", "AirCon", "Furniture", "CableTv", "Internet", "DirectLine", "ShowerHeater", "NearBts", "NearSubway", "Parking", "Fitness")
                        .HasName("_dta_index_Prop_Option_5_2117582582__col__");

                    b.ToTable("Prop_Option");
                });

            modelBuilder.Entity("Thaiproperty.Models.PropPlace", b =>
                {
                    b.Property<int>("PropId")
                        .HasColumnName("PropID");

                    b.Property<int>("PlaceId")
                        .HasColumnName("PlaceID");

                    b.HasKey("PropId", "PlaceId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("PropId")
                        .HasName("_dta_index_Prop_Place_c_34_1013578649__K1")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("PlaceId", "PropId")
                        .HasName("_dta_index_Prop_Place_34_1013578649__K2_K1");

                    b.HasIndex("PropId", "PlaceId")
                        .HasName("_dta_index_Prop_Place_5_1013578649__col__");

                    b.ToTable("Prop_Place");
                });

            modelBuilder.Entity("Thaiproperty.Models.PropPost", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PostID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<short?>("Area");

                    b.Property<byte?>("AreaUnit");

                    b.Property<byte>("BathRoom")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<byte>("BedRoom")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ContactName")
                        .HasMaxLength(50);

                    b.Property<int?>("Deposit");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<int>("DistrictId")
                        .HasColumnName("DistrictID");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("smalldatetime");

                    b.Property<byte>("Floor")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("ForRent");

                    b.Property<string>("Ipaddress")
                        .IsRequired()
                        .HasColumnName("IPAddress")
                        .HasMaxLength(16);

                    b.Property<string>("LocationGoogleMap")
                        .HasMaxLength(50);

                    b.Property<double?>("LocationX");

                    b.Property<double?>("LocationY");

                    b.Property<string>("LogoImageFile")
                        .HasMaxLength(100);

                    b.Property<int>("MemberId")
                        .HasColumnName("MemberID");

                    b.Property<string>("PasswordForEdit")
                        .HasMaxLength(10);

                    b.Property<DateTime>("PostDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("Price");

                    b.Property<int?>("ProjectId")
                        .HasColumnName("ProjectID");

                    b.Property<int>("ProvinceId")
                        .HasColumnName("ProvinceID");

                    b.Property<string>("SourceImage")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("SponsorExpireDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Telephone")
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("TitleEn")
                        .HasColumnName("Title_En")
                        .HasMaxLength(100);

                    b.Property<int>("TotalView");

                    b.Property<int>("TypeId")
                        .HasColumnName("TypeID");

                    b.HasKey("PostId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("Title");

                    b.HasIndex("TypeId");

                    b.HasIndex("PostId", "TypeId")
                        .HasName("_dta_index_Prop_Post_34_1662628966__K1_K15");

                    b.HasIndex("Title", "PostId")
                        .HasName("_dta_index_Prop_Post_34_1662628966__K1_2");

                    b.HasIndex("TypeId", "SponsorExpireDate")
                        .HasName("IX_Prop_Post_SponsorExpireDate");

                    b.HasIndex("TypeId", "ForRent", "SponsorExpireDate")
                        .HasName("_dta_index_Prop_Post_5_1662628966__K15_K4_K30");

                    b.HasIndex("PostId", "Title", "Price", "ForRent", "BathRoom", "BedRoom", "Floor", "Area", "AreaUnit", "Address", "Telephone", "ProvinceId", "DistrictId", "TypeId", "MemberId", "LogoImageFile", "LocationX", "LocationY", "LocationGoogleMap", "TotalView", "Ipaddress", "PostDate", "ExpireDate", "EmailAddress", "ContactName", "TitleEn", "Deposit", "PasswordForEdit", "SponsorExpireDate", "ProjectId")
                        .HasName("_dta_index_Prop_Post_5_1662628966__col__");

                    b.ToTable("Prop_Post");
                });

            modelBuilder.Entity("Thaiproperty.Models.PropVote", b =>
                {
                    b.Property<int>("VoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VoteID");

                    b.Property<int>("PostId")
                        .HasColumnName("PostID");

                    b.Property<int>("VoteScore");

                    b.HasKey("VoteId");

                    b.ToTable("Prop_Vote");
                });

            modelBuilder.Entity("Thaiproperty.Models.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .HasColumnName("ProvinceID");

                    b.Property<string>("ProvinceEn")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ProvinceTh")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ProvinceId");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("Thaiproperty.Models.SearchHistory", b =>
                {
                    b.Property<int>("SearchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SearchID");

                    b.Property<int>("ResultFound");

                    b.Property<DateTime>("SearchDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SearchKeyword")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("SearchId");

                    b.ToTable("SearchHistory");
                });

            modelBuilder.Entity("Thaiproperty.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StaffID");

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Gender");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("LastLoginIp")
                        .HasColumnName("LastLoginIP")
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Mobile")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<int>("ProvinceId")
                        .HasColumnName("ProvinceID");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.HasKey("StaffId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Thaiproperty.Models.ViewHistory", b =>
                {
                    b.Property<string>("SessionId")
                        .HasColumnName("SessionID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("PostId")
                        .HasColumnName("PostID");

                    b.Property<DateTime>("ViewDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("SessionId", "PostId");

                    b.ToTable("ViewHistory");
                });

            modelBuilder.Entity("Thaiproperty.Models.ViewLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LogID");

                    b.Property<DateTime>("DateViewed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PostId")
                        .HasColumnName("PostID");

                    b.HasKey("LogId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("PostId", "DateViewed")
                        .HasName("IX_CX_ViewLog")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("ViewLog");

                    b.HasAnnotation("SqlServer:MemoryOptimized", true);
                });

            modelBuilder.Entity("Thaiproperty.Models.AlbumComment", b =>
                {
                    b.HasOne("Thaiproperty.Models.Album", "Album")
                        .WithMany("AlbumComments")
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("FK_Album_Comment_Album")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Thaiproperty.Models.AlbumItem", b =>
                {
                    b.HasOne("Thaiproperty.Models.Album", "Album")
                        .WithMany("AlbumItems")
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("FK_Album_Item_Album")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Thaiproperty.Models.BoardReply", b =>
                {
                    b.HasOne("Thaiproperty.Models.BoardTopic", "Topic")
                        .WithMany("BoardReply")
                        .HasForeignKey("TopicId")
                        .HasConstraintName("FK_Board_Reply_Board_Topic")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Thaiproperty.Models.Comment", b =>
                {
                    b.HasOne("Thaiproperty.Models.PropPost", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_Comment_Prop_Post")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Thaiproperty.Models.Company", b =>
                {
                    b.HasOne("Thaiproperty.Models.CompanyType", "CompanyType")
                        .WithMany("Company")
                        .HasForeignKey("CompanyTypeId")
                        .HasConstraintName("FK_Company_CompanyType");
                });

            modelBuilder.Entity("Thaiproperty.Models.NewProjectComment", b =>
                {
                    b.HasOne("Thaiproperty.Models.NewProject", "Project")
                        .WithMany("NewProjectComments")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_NewProject_Comment_NewProject")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Thaiproperty.Models.Place", b =>
                {
                    b.HasOne("Thaiproperty.Models.PlaceType", "PlaceType")
                        .WithMany("Place")
                        .HasForeignKey("PlaceTypeId")
                        .HasConstraintName("FK_Place_PlaceType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Thaiproperty.Models.PreForumsReply", b =>
                {
                    b.HasOne("Thaiproperty.Models.PreForumsPost", "Post")
                        .WithMany("PreForumsReply")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_PreForums_Reply_PreForums_Post")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Thaiproperty.Models.PropImage", b =>
                {
                    b.HasOne("Thaiproperty.Models.PropPost", "Post")
                        .WithMany("PropImages")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_Prop_Image_Prop_Post")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Thaiproperty.Models.PropOption", b =>
                {
                    b.HasOne("Thaiproperty.Models.PropPost", "Post")
                        .WithOne("PropOption")
                        .HasForeignKey("Thaiproperty.Models.PropOption", "PostId")
                        .HasConstraintName("FK_Prop_Option_Prop_Post")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Thaiproperty.Models.PropPlace", b =>
                {
                    b.HasOne("Thaiproperty.Models.Place", "Place")
                        .WithMany("PropPlace")
                        .HasForeignKey("PlaceId")
                        .HasConstraintName("FK_Prop_Place_Place")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Thaiproperty.Models.PropPost", "Prop")
                        .WithMany("PropPlaces")
                        .HasForeignKey("PropId")
                        .HasConstraintName("FK_Prop_Place_Prop_Post")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Thaiproperty.Models.PropPost", b =>
                {
                    b.HasOne("Thaiproperty.Models.District", "District")
                        .WithMany("PropPost")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_Prop_Post_District")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Thaiproperty.Models.Member", "Member")
                        .WithMany("PropPost")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Prop_Post_Member")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Thaiproperty.Models.NewProject", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("Thaiproperty.Models.Province", "Province")
                        .WithMany("PropPost")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_Prop_Post_Province");

                    b.HasOne("Thaiproperty.Models.PropertyType", "Type")
                        .WithMany("PropPost")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_Prop_Post_PropertyType");
                });
#pragma warning restore 612, 618
        }
    }
}
